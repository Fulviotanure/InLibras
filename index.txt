 <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="dataServico" class="block text-sm font-medium text-gray-700 mb-2">
                            Data do Serviço
                        </label>
                        <input type="text" id="dataServico" 
                               class="input-modern w-full"
                               placeholder="dd/mm/aaaa"
                               pattern="\d{2}/\d{2}/\d{4}"
                               maxlength="10"
                               required>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="horaInicio" class="block text-sm font-medium text-gray-700 mb-2">
                                Hora de Início
                            </label>
                            <input type="text" id="horaInicio" placeholder="00:00"
                                   class="input-modern w-full">
                        </div>

                        <div>
                            <label for="horaFim" class="block text-sm font-medium text-gray-700 mb-2">
                                Hora Final
                            </label>
                            <input type="text" id="horaFim" placeholder="00:00"
                                   class="input-modern w-full">
                        </div>
                    </div>
                </div>

                <!-- Foreign Language Times -->
                <div id="divHoraInicioLE" class="hidden">
                    <label for="horaInicioLinguaEstrangeira" class="block text-sm font-medium text-gray-700 mb-2">
                        Início Língua Estrangeira
                    </label>
                    <input type="text" id="horaInicioLinguaEstrangeira" placeholder="00:00"
                           class="input-modern w-full">
                </div>

                <div id="divHoraFimLE" class="hidden">
                    <label for="horaFimLinguaEstrangeira" class="block text-sm font-medium text-gray-700 mb-2">
                        Fim Língua Estrangeira
                    </label>
                    <input type="text" id="horaFimLinguaEstrangeira" placeholder="00:00"
                           class="input-modern w-full">
                </div>

                <!-- Checkboxes -->
                <div class="flex items-center space-x-6">
                    <div class="flex items-center">
                        <input type="checkbox" id="linguaEstrangeira" class="checkbox-modern">
                        <label for="linguaEstrangeira" class="ml-3 text-gray-700">
                            Com Língua Estrangeira?
                        </label>
                    </div>

                    <div class="flex items-center">
                        <input type="checkbox" id="eFeriado" class="checkbox-modern">
                        <label for="eFeriado" class="ml-3 text-gray-700">
                            É Feriado?
                        </label>
                    </div>
                </div>
            </div>

            <!-- Add Day Button -->
            <div class="flex justify-end mt-6">
                <button id="addDay" class="btn-modern">
                    Adicionar Dia
                </button>
            </div>
        </div>

        <!-- Table Section -->
        <div class="card-modern">
            <div class="overflow-x-auto">
                <table class="table-modern">
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Início</th>
                            <th>Fim</th>
                            <th>Horas</th>
                            <th>Qtd. Tils</th>
                            <th>Língua Estrangeira (50%)</th>
                            <th>Sábado (25%)</th>
                            <th>Domingo/<br>Feriado<br>(50%)</th>
                            <th>Horário Noturno (25%)</th>
                            <th>Valor Base</th>
                            <th>Total</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="dadosTabela">
                        <!-- Dados serão inseridos aqui -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Totals Section -->
        <div class="card-modern flex flex-col md:flex-row md:justify-between items-start md:items-center">
            <div>
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Resumo do Orçamento</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 text-gray-700 font-medium">
                    <p>Horas Totais: <span id="totalHoras" class="font-semibold text-gray-900">0.00</span></p>
                    <p>Valor por Hora: <span id="valorHoraTotal" class="font-semibold text-gray-900">R$ 0,00</span></p>
                    <p>Total Acréscimos: <span id="totalAcrescimos" class="font-semibold text-gray-900">R$ 0,00</span></p>
                    <p>Total Bruto: <span id="totalGeral" class="font-semibold text-gray-900">R$ 0,00</span></p>
                    <p>VALOR FINAL: <span id="valorFinal" class="font-bold text-purple-600 text-xl">R$ 0,00</span></p>
                </div>
            </div>

            <div class="flex flex-col items-end mt-6 md:mt-0">
                <div class="flex items-center space-x-2 mb-4">
                    <label for="porcentagemDesconto" class="text-lg font-medium text-gray-700">
                        Desconto (%):
                    </label>
                    <input type="number" id="porcentagemDesconto" placeholder="0"
                           min="0" max="100" step="0.01"
                           class="input-modern w-24 text-right">
                </div>
            </div>
        </div>

        <!-- Botões Salvar Orçamento e Salvar PDF -->
        <div class="max-w-7xl mx-auto flex justify-end space-x-4 mb-8 mt-8">
            <a href="orcamentos.html" class="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 shadow-md transition duration-200">
                Orçamentos
            </a>
            <button onclick="salvarOrcamento()" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 shadow-md transition duration-200">
                Salvar Orçamento
            </button>
            <button onclick="salvarPDF()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 shadow-md transition duration-200">
                Salvar PDF
            </button>
        </div>

        <!-- Description Section -->
        <div class="card-modern">
            <h2 class="text-2xl font-bold text-gray-800 mb-6">Descrição dos Valores</h2>
            <ul class="list-disc list-inside text-gray-700 leading-relaxed space-y-2">
                <li><strong>Valor Base:</strong> É o resultado da multiplicação das Horas Totais pelo Valor Hora por Intérprete.</li>
                <li><strong>Arredondamento de Horas:</strong> Horas fracionadas são arredondadas para o próximo número inteiro (ex: 2,5 horas = 3 horas).</li>
                <li><strong>Acréscimo de 1 Hora:</strong> Para períodos acima de 4 horas, é adicionada automaticamente 1 hora extra ao total.</li>
                <li><strong>Acréscimo de Sábado:</strong> Corresponde a 25% sobre o valor base do dia.</li>
                <li><strong>Acréscimo de Domingo/Feriado:</strong> Corresponde a 50% sobre o valor base do dia.</li>
                <li><strong>Acréscimo de Língua Estrangeira:</strong> Corresponde a 50% sobre o valor base do dia.</li>
                <li><strong>Acréscimo de Horário Noturno:</strong> Corresponde a 25% sobre o valor base do dia para serviços realizados entre 22h e 5h.</li>
                <li><strong>Total de Acréscimos:</strong> É a soma de todos os acréscimos diários aplicáveis.</li>
                <li><strong>Total Bruto:</strong> É a soma do Valor Base com o Total de Acréscimos.</li>
                <li><strong>Valor Final:</strong> É o Total Bruto menos o percentual de desconto aplicado.</li>
            </ul>
        </div>
    </div>

    <!-- Template para impressão -->
    <div id="printTemplate" style="display: none;">
        <div class="container">
            <div class="header-pdf">
                <img src="${window.location.origin}/${window.location.pathname.split('/').slice(0,&#32;-1).join('/')}/favicon.png" class="logo-pdf" alt="InLibras Logo">
                <h1>InLibras</h1>
                <p>Orçamento de Interpretação em Libras</p>
            </div>
            
            <div class="summary-pdf">
                <h2>Resumo do Orçamento</h2>
                <div class="summary-grid-pdf">
                    <div>
                        <p><strong>Horas Totais:</strong> <span id="printTotalHoras"></span></p>
                        <p><strong>Valor por Hora:</strong> <span id="printValorHora"></span></p>
                        <p><strong>Total Acréscimos:</strong> <span id="printTotalAcrescimos"></span></p>
                    </div>
                    <div>
                        <p><strong>Total Bruto:</strong> <span id="printTotalGeral"></span></p>
                        <p><strong>Desconto:</strong> <span id="printDesconto"></span></p>
                        <p><strong>VALOR FINAL:</strong> <span id="printValorFinal"></span></p>
                    </div>
                </div>
            </div>

            <div class="details">
                <h2>Detalhamento dos Serviços</h2>
                <table id="printTable"></table>
            </div>

            <div class="footer-pdf">
                <p>Este orçamento foi gerado automaticamente pelo sistema InLibras</p>
                <p>Data de geração: <span id="printDataGeracao"></span></p>
            </div>
        </div>
    </div>

    <script>
        // Função para alternar o menu do usuário
        window.toggleUserMenu = function() {
            const menu = document.getElementById('userMenu');
            menu.classList.toggle('hidden');
        };

        // Fechar o menu quando clicar fora
        document.addEventListener('click', function(event) {
            const menu = document.getElementById('userMenu');
            const userButton = event.target.closest('button');
            if (!userButton && !menu.contains(event.target)) {
                menu.classList.add('hidden');
            }
        });

        // Função para salvar orçamento
        window.salvarOrcamento = async function() {
            const user = firebase.auth().currentUser;
            if (!user) {
                alert('Por favor, faça login para salvar o orçamento.');
                return;
            }

            const nomeCliente = prompt('Digite o nome do cliente:');
            if (!nomeCliente) {
                alert('Por favor, informe o nome do cliente.');
                return;
            }

            // Coletar dados da tabela
            const dias = [];
            const rows = document.querySelectorAll('#dadosTabela tr');
            
            if (rows.length === 0) {
                alert('Por favor, adicione pelo menos um dia ao orçamento.');
                return;
            }

            rows.forEach(row => {
                const cells = row.cells;
                const dia = {
                    data: cells[0].textContent,
                    horaInicio: cells[1].textContent,
                    horaFim: cells[2].textContent,
                    horas: parseFloat(cells[3].textContent) || 0,
                    quantidadeInterpretes: parseInt(cells[4].textContent) || 0,
                    linguaEstrangeira: cells[5].textContent !== 'Não',
                    acrescimoSabado: cells[6].textContent !== 'Não' ? parseFloat(cells[6].textContent.replace('R$', '').replace('.', '').replace(',', '.')) : 0,
                    acrescimoDomingoFeriado: cells[7].textContent !== 'Não' ? parseFloat(cells[7].textContent.replace('R$', '').replace('.', '').replace(',', '.')) : 0,
                    acrescimoHorarioNoturno: cells[8].textContent !== 'Não' ? parseFloat(cells[8].textContent.replace('R$', '').replace('.', '').replace(',', '.')) : 0,
                    valorBase: parseFloat(cells[9].textContent.replace('R$', '').replace('.', '').replace(',', '.')) || 0,
                    valorTotal: parseFloat(cells[10].textContent.replace('R$', '').replace('.', '').replace(',', '.')) || 0
                };
                dias.push(dia);
            });

            // Coletar totais
            const totais = {
                totalHoras: parseFloat(document.getElementById('totalHoras').textContent) || 0,
                valorHora: parseFloat(document.getElementById('valorHoraTotal').textContent.replace('R$', '').replace('.', '').replace(',', '.')) || 0,
                totalAcrescimos: parseFloat(document.getElementById('totalAcrescimos').textContent.replace('R$', '').replace('.', '').replace(',', '.')) || 0,
                totalBruto: parseFloat(document.getElementById('totalGeral').textContent.replace('R$', '').replace('.', '').replace(',', '.')) || 0,
                valorFinal: parseFloat(document.getElementById('valorFinal').textContent.replace('R$', '').replace('.', '').replace(',', '.')) || 0
            };

            // Criar objeto do orçamento
            const orcamento = {
                userId: user.uid,
                nomeCliente: nomeCliente,
                data: new Date(),
                valorHora: parseFloat(document.getElementById('valorHoraInterprete').value) || 0,
                quantidadeInterpretes: parseInt(document.getElementById('quantidadeInterpretes').value) || 0,
                dias: dias,
                totais: totais,
                desconto: parseFloat(document.getElementById('porcentagemDesconto').value) || 0
            };

            try {
                console.log('Salvando orçamento:', orcamento);
                const docRef = await db.collection('orcamentos').add(orcamento);
                console.log('Orçamento salvo com ID:', docRef.id);
                alert('Orçamento salvo com sucesso!');
                window.location.href = 'orcamentos.html';
            } catch (error) {
                console.error('Erro ao salvar orçamento:', error);
                alert('Erro ao salvar orçamento: ' + error.message);
            }
        };

        window.salvarPDF = function() {
            const printWindow = window.open('', '_blank');
            const logoPath = window.location.origin + '/assets/images/InLibraspdf.png';
            
            // Clonar a tabela e remover a coluna de ações
            const tabelaOriginal = document.querySelector('table');
            const tabelaClone = tabelaOriginal.cloneNode(true);
            const colunaAcoes = tabelaClone.querySelectorAll('th:last-child, td:last-child');
            colunaAcoes.forEach(cell => cell.remove());

            const template = `
<!DOCTYPE html>
<html>
    <head>
        <title>Orçamento InLibras</title>
        <style>
            body { 
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
            }
            .container { 
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }
            .header-pdf { 
                text-align: center; 
                margin-bottom: 30px;
            }
            .logo-pdf { 
                width: auto;
                height: auto;
                max-width: 100%;
                margin: 0 auto;
            }
            .summary-pdf { 
                margin-bottom: 30px;
                padding: 20px;
                background: #f8fafc;
                border-radius: 1rem;
            }
            .summary-grid-pdf { 
                display: grid; 
                grid-template-columns: 1fr 1fr; 
                gap: 20px;
                margin-top: 20px;
            }
            table { 
                width: 100%; 
                border-collapse: collapse; 
                margin-bottom: 30px;
            }
            th, td { 
                border: 1px solid #e2e8f0; 
                padding: 12px; 
                text-align: left;
            }
            th { 
                background: #f8fafc;
                font-weight: 600;
                color: #475569;
            }
            .footer-pdf { 
                text-align: center; 
                margin-top: 30px; 
                color: #64748b;
                padding: 20px;
                border-top: 1px solid #e2e8f0;
            }
            @media print {
                body {
                    padding: 0;
                }
                .container {
                    padding: 0;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header-pdf">
                <img src="${logoPath}" class="logo-pdf" alt="InLibras Logo">
            </div>
            
            <div class="summary-pdf">
                <div class="summary-grid-pdf">
                    <div>
                        <p><strong>Horas Totais:</strong> <span id="printTotalHoras">${document.getElementById('totalHoras').textContent}</span></p>
                        <p><strong>Valor por Hora:</strong> <span id="printValorHora">${document.getElementById('valorHoraTotal').textContent}</span></p>
                        <p><strong>Total Acréscimos:</strong> <span id="printTotalAcrescimos">${document.getElementById('totalAcrescimos').textContent}</span></p>
                    </div>
                    <div>
                        <p><strong>Total Bruto:</strong> <span id="printTotalGeral">${document.getElementById('totalGeral').textContent}</span></p>
                        <p><strong>Desconto:</strong> <span id="printDesconto">${document.getElementById('porcentagemDesconto').value}%</span></p>
                        <p><strong>VALOR FINAL:</strong> <span id="printValorFinal" style="color: #7c3aed; font-weight: bold; font-size: 1.2rem;">${document.getElementById('valorFinal').textContent}</span></p>
                    </div>
                </div>
            </div>

            <div class="details">
                <table>
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Início</th>
                            <th>Fim</th>
                            <th>Horas</th>
                            <th>Qtd. Tils</th>
                            <th>Língua Estrangeira (50%)</th>
                            <th>Sábado (25%)</th>
                            <th>Domingo/Feriado (50%)</th>
                            <th>Horário Noturno (25%)</th>
                            <th>Valor Base</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tabelaClone.querySelector('tbody').innerHTML}
                    </tbody>
                </table>
            </div>

            <div class="footer-pdf">
                <p>Este orçamento foi gerado automaticamente pelo sistema InLibras</p>
                <p>Data de geração: ${new Date().toLocaleDateString('pt-BR')}</p>
            </div>
        </div>
    </body>
</html>`;

            printWindow.document.write(template);
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 500);
        };

        // Função para formatar data
        function formatDate(dateString) {
            const [year, month, day] = dateString.split('-');
            return day + '/' + month + '/' + year;
        }

        // Função para formatar input de data
        function formatarDataInput(input) {
            input.addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                
                if (value.length > 0) {
                    if (value.length <= 2) {
                        value = value;
                    } else if (value.length <= 4) {
                        value = value.slice(0, 2) + '/' + value.slice(2);
                    } else {
                        value = value.slice(0, 2) + '/' + value.slice(2, 4) + '/' + value.slice(4, 8);
                    }
                }
                e.target.value = value;
            });

            input.addEventListener('blur', function(e) {
                let value = e.target.value;
                if (value.length > 0) {
                    let [day, month, year] = value.split('/');
                    
                    // Validar dia
                    if (day && (parseInt(day) < 1 || parseInt(day) > 31)) {
                        e.target.value = '';
                        alert('Dia inválido. Por favor, use um dia entre 01 e 31.');
                        return;
                    }
                    
                    // Validar mês
                    if (month && (parseInt(month) < 1 || parseInt(month) > 12)) {
                        e.target.value = '';
                        alert('Mês inválido. Por favor, use um mês entre 01 e 12.');
                        return;
                    }
                    
                    // Validar ano
                    if (year && (parseInt(year) < 1900 || parseInt(year) > 2100)) {
                        e.target.value = '';
                        alert('Ano inválido. Por favor, use um ano entre 1900 e 2100.');
                        return;
                    }

                    // Garantir que todos os campos tenham dois dígitos
                    if (day) day = day.padStart(2, '0');
                    if (month) month = month.padStart(2, '0');
                    if (year) year = year.padStart(4, '0');

                    // Reconstruir a data com as barras
                    if (day && month && year) {
                        e.target.value = day + '/' + month + '/' + year;
                    } else if (day && month) {
                        e.target.value = day + '/' + month;
                    } else if (day) {
                        e.target.value = day;
                    }
                }
            });

            // Limitar o tamanho máximo
            input.addEventListener('input', function(e) {
                if (e.target.value.length > 10) {
                    e.target.value = e.target.value.slice(0, 10);
                }
            });
        }

        // Função para imprimir
        window.imprimirOrcamento = function() {
            salvarPDF();
        };

        // Função para atualizar totais
        window.atualizarTotais = function() {
            let totalHoras = 0;
            let valorBrutoTotal = 0;
            let totalAcrescimos = 0;

            const rows = document.querySelectorAll('#dadosTabela tr');
            rows.forEach(row => {
                // Horas totais (coluna 3)
                totalHoras += parseFloat(row.cells[3].textContent) || 0;
                
                // Valor base (coluna 9)
                const valorBaseTexto = row.cells[9].textContent.replace('R$', '').replace('.', '').replace(',', '.');
                const valorBase = parseFloat(valorBaseTexto) || 0;
                
                // Valor total com acréscimos (coluna 10)
                const valorTotalTexto = row.cells[10].textContent.replace('R$', '').replace('.', '').replace(',', '.');
                const valorTotal = parseFloat(valorTotalTexto) || 0;
                
                // Calcular acréscimos
                const acrescimos = valorTotal - valorBase;
                totalAcrescimos += acrescimos;
                
                valorBrutoTotal += valorTotal;
            });

            const valorHoraInterprete = parseFloat(document.getElementById('valorHoraInterprete').value) || 0;
            const quantidadeInterpretes = parseInt(document.getElementById('quantidadeInterpretes').value) || 0;
            const porcentagemDesconto = parseFloat(document.getElementById('porcentagemDesconto').value) || 0;

            // Atualizar os elementos do resumo
            document.getElementById('totalHoras').textContent = totalHoras.toFixed(2);
            document.getElementById('valorHoraTotal').textContent = formatCurrency(valorHoraInterprete);
            document.getElementById('totalAcrescimos').textContent = formatCurrency(totalAcrescimos);
            document.getElementById('totalGeral').textContent = formatCurrency(valorBrutoTotal);

            // Calcular valor final com desconto
            const valorFinal = valorBrutoTotal * (1 - (porcentagemDesconto / 100));
            document.getElementById('valorFinal').textContent = formatCurrency(valorFinal);
        };

        // Função para remover linha da tabela
        window.removerLinha = function(button) {
            const row = button.closest('tr');
            row.remove();
            window.atualizarTotais();
        };

        // Função para formatar moeda
        function formatCurrency(value) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            }).format(value);
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Firebase config e inicialização agora são globais

            // Função para alternar o menu do usuário
            window.toggleUserMenu = function() {
                const menu = document.getElementById('userMenu');
                menu.classList.toggle('hidden');
            };

            // Fechar o menu quando clicar fora
            document.addEventListener('click', function(event) {
                const menu = document.getElementById('userMenu');
                const userButton = event.target.closest('button');
                if (!userButton && !menu.contains(event.target)) {
                    menu.classList.add('hidden');
                }
            });

            // Função de logout
            window.logout = function() {
                console.log('Botão Sair clicado. Tentando fazer logout...');
                firebase.auth().signOut().then(() => {
                    window.location.href = 'login.html';
                }).catch((error) => {
                    console.error('Erro ao fazer logout:', error);
                    alert('Erro ao fazer logout: ' + error.message);
                });
            };

            const valorHoraInterpreteInput = document.getElementById('valorHoraInterprete');
            const quantidadeInterpretesInput = document.getElementById('quantidadeInterpretes');
            const calcularOrcamentoBtn = document.getElementById('calcularOrcamento');
            const resultadosDiv = document.getElementById('resultados');
            const horasContabilizadasSpan = document.getElementById('horasContabilizadas');
            const valorBaseSpan = document.getElementById('valorBase');
            const totalAcrescimosSpan = document.getElementById('totalAcrescimos');
            const valorBrutoSpan = document.getElementById('valorBruto');
            const valorNotaFiscalSpan = document.getElementById('valorNotaFiscal');
            const valorTotalAntesDescontoSpan = document.getElementById('valorTotalAntesDesconto');
            const secaoDescontoDiv = document.getElementById('secaoDesconto');
            const porcentagemDescontoInput = document.getElementById('porcentagemDesconto');
            const aplicarDescontoBtn = document.getElementById('aplicarDesconto');
            const valorFinalSpan = document.getElementById('valorFinal');

            // Novos elementos para entradas diárias e horário de língua estrangeira
            const dailyEntriesContainer = document.getElementById('dailyEntriesContainer');
            const dailyEntryTemplate = document.getElementById('dailyEntryTemplate');
            const addDayBtn = document.getElementById('addDay');
            const dailyResultsSummary = document.getElementById('dailyResultsSummary');

            let dailyCalculations = []; // Para armazenar resultados de cada dia

            function formatDate(dateString) {
                const [year, month, day] = dateString.split('-');
                return `${day}/${month}/${year}`;
            }

            function formatarDataInput(input) {
                input.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    
                    if (value.length > 0) {
                        if (value.length <= 2) {
                            value = value;
                        } else if (value.length <= 4) {
                            value = value.slice(0, 2) + '/' + value.slice(2);
                        } else {
                            value = value.slice(0, 2) + '/' + value.slice(2, 4) + '/' + value.slice(4, 8);
                        }
                    }
                    e.target.value = value;
                });

                input.addEventListener('keydown', function(e) {
                    if (!/[\d\b\t\←\→\Delete]/.test(e.key) && !e.ctrlKey && !e.metaKey) {
                        e.preventDefault();
                    }
                });

                input.addEventListener('blur', function(e) {
                    let value = e.target.value;
                    if (value.length > 0) {
                        let [day, month, year] = value.split('/');
                        
                        // Validar dia
                        if (day && (parseInt(day) < 1 || parseInt(day) > 31)) {
                            e.target.value = '';
                            alert('Dia inválido. Por favor, use um dia entre 01 e 31.');
                            return;
                        }
                        
                        // Validar mês
                        if (month && (parseInt(month) < 1 || parseInt(month) > 12)) {
                            e.target.value = '';
                            alert('Mês inválido. Por favor, use um mês entre 01 e 12.');
                            return;
                        }
                        
                        // Validar ano
                        if (year && (parseInt(year) < 1900 || parseInt(year) > 2100)) {
                            e.target.value = '';
                            alert('Ano inválido. Por favor, use um ano entre 1900 e 2100.');
                            return;
                        }

                        // Garantir que todos os campos tenham dois dígitos
                        if (day) day = day.padStart(2, '0');
                        if (month) month = month.padStart(2, '0');
                        if (year) year = year.padStart(4, '0');

                        // Reconstruir a data com as barras
                        if (day && month && year) {
                            e.target.value = `${day}/${month}/${year}`;
                        } else if (day && month) {
                            e.target.value = `${day}/${month}`;
                        } else if (day) {
                            e.target.value = day;
                        }
                    }
                });

                // Limitar o tamanho máximo
                input.addEventListener('input', function(e) {
                    if (e.target.value.length > 10) {
                        e.target.value = e.target.value.slice(0, 10);
                    }
                });
            }

            // Inicializar a formatação da data
            formatarDataInput(document.getElementById('dataServico'));

            // Função para formatar valor monetário
            function formatarValorMonetario(input) {
                input.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 0) {
                        value = (parseFloat(value) / 100).toFixed(2);
                    e.target.value = value;
                    }
                });

                input.addEventListener('blur', function(e) {
                    if (e.target.value) {
                        let value = parseFloat(e.target.value);
                        e.target.value = value.toFixed(2);
                    }
                });
            }

            // Inicializar a formatação do valor da hora
            formatarValorMonetario(document.getElementById('valorHoraInterprete'));

            // Função para formatar quantidade
            function formatarQuantidade(input) {
                input.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    e.target.value = value;
                });
            }

            // Função para formatar hora
            function formatarHoraInput(input) {
                input.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 0) {
                        if (value.length <= 2) {
                            value = value;
                        } else if (value.length <= 4) {
                            value = value.slice(0, 2) + ':' + value.slice(2);
                        }
                    }
                    e.target.value = value;
                });

                input.addEventListener('keydown', function(e) {
                    if (!/[\d\b\t\←\→\Delete]/.test(e.key) && !e.ctrlKey && !e.metaKey) {
                        e.preventDefault();
                    }
                });

                input.addEventListener('blur', function(e) {
                    let value = e.target.value;
                    if (value.length > 0) {
                        let [hours, minutes] = value.split(':');

                        // Validar horas
                        if (hours && (parseInt(hours) < 0 || parseInt(hours) > 23)) {
                            e.target.value = '';
                            alert('Hora inválida. Por favor, use um valor entre 00 e 23.');
                            return;
                        }

                        // Validar minutos
                        if (minutes && (parseInt(minutes) < 0 || parseInt(minutes) > 59)) {
                            e.target.value = '';
                            alert('Minuto inválido. Por favor, use um valor entre 00 e 59.');
                            return;
                        }

                        // Garantir dois dígitos para horas e minutos
                        if (hours) hours = hours.padStart(2, '0');
                        if (minutes) minutes = minutes.padStart(2, '0');

                        if (hours && minutes) {
                            e.target.value = `${hours}:${minutes}`;
                        } else if (hours) {
                            e.target.value = `${hours}:00`;
                        }
                    }
                });

                // Limitar o tamanho máximo
                input.addEventListener('input', function(e) {
                    if (e.target.value.length > 5) {
                        e.target.value = e.target.value.slice(0, 5);
                    }
                });
            }

            // Inicializar a formatação da hora
            formatarHoraInput(document.getElementById('horaInicio'));
            formatarHoraInput(document.getElementById('horaFim'));
            formatarHoraInput(document.getElementById('horaInicioLinguaEstrangeira'));
            formatarHoraInput(document.getElementById('horaFimLinguaEstrangeira'));

            // Adicionar ouvintes de evento para as checkboxes
            const linguaEstrangeiraCheckbox = document.getElementById('linguaEstrangeira');
            const divHoraInicioLE = document.getElementById('divHoraInicioLE');
            const divHoraFimLE = document.getElementById('divHoraFimLE');

            linguaEstrangeiraCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    divHoraInicioLE.classList.remove('hidden');
                    divHoraFimLE.classList.remove('hidden');
                } else {
                    divHoraInicioLE.classList.add('hidden');
                    divHoraFimLE.classList.add('hidden');
                    // Limpar valores quando desmarcado
                    document.getElementById('horaInicioLinguaEstrangeira').value = '';
                    document.getElementById('horaFimLinguaEstrangeira').value = '';
                }
                window.atualizarTotais();
            });

            const feriadoCheckbox = document.getElementById('eFeriado');
            feriadoCheckbox.addEventListener('change', window.atualizarTotais);

            // Lógica para adicionar uma nova linha à tabela
            addDayBtn.addEventListener('click', addDailyEntry);

            function addDailyEntry() {
                const dataServico = document.getElementById('dataServico').value;
                const horaInicio = document.getElementById('horaInicio').value;
                const horaFim = document.getElementById('horaFim').value;
                const linguaEstrangeira = document.getElementById('linguaEstrangeira').checked;
                const feriado = document.getElementById('eFeriado').checked;
                const horaInicioLinguaEstrangeira = document.getElementById('horaInicioLinguaEstrangeira').value;
                const horaFimLinguaEstrangeira = document.getElementById('horaFimLinguaEstrangeira').value;
                const valorHoraInterprete = parseFloat(valorHoraInterpreteInput.value) || 0;
                const quantidadeInterpretes = parseInt(quantidadeInterpretesInput.value) || 0;

                if (!dataServico || !horaInicio || !horaFim) {
                    alert('Por favor, preencha a Data, Hora de Início e Hora Final.');
                    return;
                }

                if (new Date(`2000/01/01 ${horaInicio}`) >= new Date(`2000/01/01 ${horaFim}`)) {
                    // Se o horário final for menor que o inicial, significa que passa da meia-noite
                    if (parseInt(horaFim.split(':')[0]) < parseInt(horaInicio.split(':')[0])) {
                        const confirmacao = confirm('Atenção: Este horário passa da meia-noite para o dia seguinte. Deseja continuar?');
                        if (!confirmacao) {
                            return;
                        }
                    } else {
                        alert('A Hora Final deve ser posterior à Hora de Início.');
                        return;
                    }
                }

                if (linguaEstrangeira && (!horaInicioLinguaEstrangeira || !horaFimLinguaEstrangeira)) {
                    alert('Preencha as horas de Língua Estrangeira.');
                    return;
                }

                if (linguaEstrangeira && new Date(`2000/01/01 ${horaInicioLinguaEstrangeira}`) >= new Date(`2000/01/01 ${horaFimLinguaEstrangeira}`)) {
                    alert('A Hora Final da Língua Estrangeira deve ser posterior à Hora de Início da Língua Estrangeira.');
                    return;
                }

                // Calcular horas totais considerando passagem da meia-noite
                const [hInicio, mInicio] = horaInicio.split(':').map(Number);
                const [hFim, mFim] = horaFim.split(':').map(Number);
                let totalMinutos;

                if (hFim < hInicio) {
                    // Se passar da meia-noite, calcula até 23:59 e depois soma as horas do dia seguinte
                    const minutosAteMeiaNoite = (24 * 60) - (hInicio * 60 + mInicio);
                    const minutosDepoisMeiaNoite = hFim * 60 + mFim;
                    totalMinutos = minutosAteMeiaNoite + minutosDepoisMeiaNoite;
                } else {
                    totalMinutos = (hFim * 60 + mFim) - (hInicio * 60 + mInicio);
                }

                let horasTrabalhadas = totalMinutos / 60;

                // Arredondar horas para cima
                horasTrabalhadas = Math.ceil(horasTrabalhadas);

                // Adicionar 1 hora extra se o período for maior que 4 horas
                if (horasTrabalhadas > 4) {
                    horasTrabalhadas += 1;
                }

                let horasLinguaEstrangeira = 0;
                if (linguaEstrangeira) {
                    const [hInicioLE, mInicioLE] = horaInicioLinguaEstrangeira.split(':').map(Number);
                    const [hFimLE, mFimLE] = horaFimLinguaEstrangeira.split(':').map(Number);
                    let totalMinutosLE;

                    if (hFimLE < hInicioLE) {
                        // Se passar da meia-noite, calcula até 23:59 e depois soma as horas do dia seguinte
                        const minutosAteMeiaNoiteLE = (24 * 60) - (hInicioLE * 60 + mInicioLE);
                        const minutosDepoisMeiaNoiteLE = hFimLE * 60 + mFimLE;
                        totalMinutosLE = minutosAteMeiaNoiteLE + minutosDepoisMeiaNoiteLE;
                    } else {
                        totalMinutosLE = (hFimLE * 60 + mFimLE) - (hInicioLE * 60 + mInicioLE);
                    }

                    horasLinguaEstrangeira = totalMinutosLE / 60;
                    horasLinguaEstrangeira = Math.ceil(horasLinguaEstrangeira);
                }

                let valorBaseDia = horasTrabalhadas * valorHoraInterprete * quantidadeInterpretes;
                let acrescimoSabado = 0;
                let acrescimoDomingoFeriado = 0;
                let acrescimoLinguaEstrangeira = 0;
                let acrescimoHorarioNoturno = 0;

                const dataObj = new Date(dataServico.split('/').reverse().join('-') + 'T00:00:00');
                const diaDaSemana = dataObj.getDay(); // 0 = Domingo, 6 = Sábado

                // Verificar horário noturno
                const horaInicioNum = parseInt(horaInicio.split(':')[0]);
                const horaFimNum = parseInt(horaFim.split(':')[0]);
                
                // Verifica se o serviço começa ou termina no horário noturno (22h às 5h)
                if ((horaInicioNum >= 22 || horaInicioNum < 5) || (horaFimNum >= 22 || horaFimNum < 5)) {
                    acrescimoHorarioNoturno = valorBaseDia * 0.25;
                }

                // Se passar da meia-noite, verifica também o dia seguinte para acréscimos
                if (horaFimNum < horaInicioNum) {
                    const diaSeguinte = new Date(dataObj);
                    diaSeguinte.setDate(diaSeguinte.getDate() + 1);
                    const diaDaSemanaSeguinte = diaSeguinte.getDay();

                    if (diaDaSemanaSeguinte === 6) { // Sábado
                        acrescimoSabado = valorBaseDia * 0.25;
                    } else if (diaDaSemanaSeguinte === 0) { // Domingo
                        acrescimoDomingoFeriado = valorBaseDia * 0.50;
                    }
                } else {
                    if (diaDaSemana === 6) { // Sábado
                        acrescimoSabado = valorBaseDia * 0.25;
                    } else if (diaDaSemana === 0 || feriado) { // Domingo ou Feriado
                        acrescimoDomingoFeriado = valorBaseDia * 0.50;
                    }
                }

                if (linguaEstrangeira) {
                    acrescimoLinguaEstrangeira = valorBaseDia * 0.50;
                }

                const valorDiaComAcrescimos = valorBaseDia + acrescimoSabado + acrescimoDomingoFeriado + acrescimoLinguaEstrangeira + acrescimoHorarioNoturno;

                const dadosTabela = document.getElementById('dadosTabela');
                if (!dadosTabela) {
                    console.error('Elemento dadosTabela não encontrado');
                    return;
                }

                const novaLinha = document.createElement('tr');
                novaLinha.innerHTML = `
                    <td>${dataServico}</td>
                    <td>${horaInicio}</td>
                    <td>${horaFim}</td>
                    <td>${horasTrabalhadas.toFixed(2)}</td>
                    <td>${quantidadeInterpretes}</td>
                    <td>${linguaEstrangeira ? formatCurrency(acrescimoLinguaEstrangeira) : 'Não'}</td>
                    <td>${acrescimoSabado > 0 ? formatCurrency(acrescimoSabado) : 'Não'}</td>
                    <td>${acrescimoDomingoFeriado > 0 ? formatCurrency(acrescimoDomingoFeriado) : 'Não'}</td>
                    <td>${acrescimoHorarioNoturno > 0 ? formatCurrency(acrescimoHorarioNoturno) : 'Não'}</td>
                    <td>${formatCurrency(valorBaseDia)}</td>
                    <td>${formatCurrency(valorDiaComAcrescimos)}</td>
                    <td>
                        <button onclick="removerLinha(this)" class="bg-red-500 text-white px-2 py-1 rounded-md text-sm hover:bg-red-600">
                            Remover
                        </button>
                    </td>
                `;
                dadosTabela.appendChild(novaLinha);

                // Limpar campos de entrada para o próximo dia, exceto quantidade e valores base
                document.getElementById('dataServico').value = '';
                document.getElementById('horaInicio').value = '';
                document.getElementById('horaFim').value = '';
                document.getElementById('linguaEstrangeira').checked = false;
                document.getElementById('eFeriado').checked = false;
                document.getElementById('horaInicioLinguaEstrangeira').value = '';
                document.getElementById('horaFimLinguaEstrangeira').value = '';
                divHoraInicioLE.classList.add('hidden');
                divHoraFimLE.classList.add('hidden');

                window.atualizarTotais();
            }

            // Event listener para mudanças no desconto
            document.getElementById('porcentagemDesconto').addEventListener('input', window.atualizarTotais);

            // Event listeners para os campos que afetam o cálculo (hora, quantidade, valor hora)
            document.getElementById('valorHoraInterprete').addEventListener('input', window.atualizarTotais);
            document.getElementById('quantidadeInterpretes').addEventListener('input', window.atualizarTotais);
            document.getElementById('horaInicio').addEventListener('input', window.atualizarTotais);
            document.getElementById('horaFim').addEventListener('input', window.atualizarTotais);
            document.getElementById('horaInicioLinguaEstrangeira').addEventListener('input', window.atualizarTotais);
            document.getElementById('horaFimLinguaEstrangeira').addEventListener('input', window.atualizarTotais);

            // Chamada inicial para calcular totais ao carregar a página
            window.atualizarTotais();

            // Função para validar formato de data (dd/mm/aaaa)
            function validateDate(input) {
                const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/\d{4}$/;
                if (!dateRegex.test(input.value)) {
                    input.setCustomValidity('Por favor, insira uma data válida no formato dd/mm/aaaa');
                } else {
                    input.setCustomValidity('');
                }
            }

            // Função para validar formato de hora (HH:mm)
            function validateTime(input) {
                const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
                if (!timeRegex.test(input.value)) {
                    input.setCustomValidity('Por favor, insira uma hora válida no formato HH:mm');
                } else {
                    input.setCustomValidity('');
                }
            }

            // Adiciona máscara para o campo de data
            document.getElementById('dataServico').addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 0) {
                    if (value.length <= 2) {
                        value = value;
                    } else if (value.length <= 4) {
                        value = value.substring(0, 2) + '/' + value.substring(2);
                    } else {
                        value = value.substring(0, 2) + '/' + value.substring(2, 4) + '/' + value.substring(4, 8);
                    }
                }
                e.target.value = value;
                validateDate(e.target);
            });

            // Adiciona máscara para os campos de hora
            ['horaInicio', 'horaFim'].forEach(id => {
                document.getElementById(id).addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 0) {
                        if (value.length <= 2) {
                            value = value;
                        } else {
                            value = value.substring(0, 2) + ':' + value.substring(2, 4);
                        }
                    }
                    e.target.value = value;
                    validateTime(e.target);
                });
            });
        });
    </script>
</body>
</html>
